#include "WWAnalysis/TreeModifiers/interface/PileupBranchAdder.h"


PileupBranchAdder::PileupBranchAdder(const edm::ParameterSet& pset) : BranchAdder(pset){
  isInitialized_ = false;
  pileupConf_     = pset.getParameter<std::string>("pileupConf"); 
  if(pileupConf_ == "2011") setWeights2011();
  else if(pileupConf_ == "2012") setWeights2012();
  else{
    std::cout << "WARNING: you didn't specify the \"pileupConf\" parameter. Using default: 2012" 
	      << std::endl;
    setWeights2012();    
  }

}

void PileupBranchAdder::initialize(TTree& tree) {
  /*
 std::cout << "initialize in pileupClass" << std::endl;
  tree.SetBranchAddress("numTrueInteractions",&nTrueInt);  
  isInitialized_=true;
  */
}


float PileupBranchAdder::calculateValue(TTree& tree,int k, float& value)  {
  using namespace std;

  float nTrueInt;
  tree.SetBranchAddress("numTrueInteractions",&nTrueInt);  
  tree.GetEntry(k);
  value = weight(nTrueInt);


  return 0;
}


void PileupBranchAdder::setWeights2012(){
  float w[240];


w[0]= 1;
w[1]= 1;
w[2]= 0.222451;
w[3]= 0.0658851;
w[4]= 1;
w[5]= 1;
w[6]= 0.150902;
w[7]= 0.202205;
w[8]= 1;
w[9]= 1;
w[10]= 1.50116;
w[11]= 2.79375;
w[12]= 0.198341;
w[13]= 0.246893;
w[14]= 0.28116;
w[15]= 0.449377;
w[16]= 0.553276;
w[17]= 1.48919;
w[18]= 2.15249;
w[19]= 3.62415;
w[20]= 4.33041;
w[21]= 3.57192;
w[22]= 4.99603;
w[23]= 7.79303;
w[24]= 8.04276;
w[25]= 8.05557;
w[26]= 12.9364;
w[27]= 9.9036;
w[28]= 14.6975;
w[29]= 13.3387;
w[30]= 10.9734;
w[31]= 12.6077;
w[32]= 11.5617;
w[33]= 10.8107;
w[34]= 14.5043;
w[35]= 17.8497;
w[36]= 11.8817;
w[37]= 9.6805;
w[38]= 12.2255;
w[39]= 10.1117;
w[40]= 10.2482;
w[41]= 11.5398;
w[42]= 9.35737;
w[43]= 9.90259;
w[44]= 9.19216;
w[45]= 7.57377;
w[46]= 7.94847;
w[47]= 7.15578;
w[48]= 5.63016;
w[49]= 5.35972;
w[50]= 5.05791;
w[51]= 3.35313;
w[52]= 3.60582;
w[53]= 3.35256;
w[54]= 2.49496;
w[55]= 2.28219;
w[56]= 2.21227;
w[57]= 1.76362;
w[58]= 1.68533;
w[59]= 1.62149;
w[60]= 1.34263;
w[61]= 1.30646;
w[62]= 1.21918;
w[63]= 1.10347;
w[64]= 1.08544;
w[65]= 1.0251;
w[66]= 0.907123;
w[67]= 0.905997;
w[68]= 0.869217;
w[69]= 0.816708;
w[70]= 0.76043;
w[71]= 0.714367;
w[72]= 0.679723;
w[73]= 0.665294;
w[74]= 0.609956;
w[75]= 0.586386;
w[76]= 0.548999;
w[77]= 0.521088;
w[78]= 0.4929;
w[79]= 0.453545;
w[80]= 0.44546;
w[81]= 0.406266;
w[82]= 0.378486;
w[83]= 0.347898;
w[84]= 0.337097;
w[85]= 0.313674;
w[86]= 0.291392;
w[87]= 0.283346;
w[88]= 0.25272;
w[89]= 0.244178;
w[90]= 0.228673;
w[91]= 0.211327;
w[92]= 0.19084;
w[93]= 0.179408;
w[94]= 0.169234;
w[95]= 0.157131;
w[96]= 0.143818;
w[97]= 0.140968;
w[98]= 0.124021;
w[99]= 0.118273;
w[100]= 0.109751;
w[101]= 0.0977754;
w[102]= 0.0967206;
w[103]= 0.0870401;
w[104]= 0.0826372;
w[105]= 0.0746777;
w[106]= 0.0698592;
w[107]= 0.0656062;
w[108]= 0.0601853;
w[109]= 0.057892;
w[110]= 0.0517871;
w[111]= 0.0512109;
w[112]= 0.0465423;
w[113]= 0.0403982;
w[114]= 0.0443631;
w[115]= 0.0399185;
w[116]= 0.0338933;
w[117]= 0.0354274;
w[118]= 0.0310775;
w[119]= 0.0261122;
w[120]= 0.0280878;
w[121]= 0.0264014;
w[122]= 0.021299;
w[123]= 0.0245197;
w[124]= 0.0221076;
w[125]= 0.0189236;
w[126]= 0.0202148;
w[127]= 0.0177248;
w[128]= 0.0163634;
w[129]= 0.0188307;
w[130]= 0.0144512;
w[131]= 0.0134599;
w[132]= 0.0143315;
w[133]= 0.0130668;
w[134]= 0.0108666;
w[135]= 0.0162516;
w[136]= 0.0126035;
w[137]= 0.0102154;
w[138]= 0.0154442;
w[139]= 0.00959973;
w[140]= 0.0106827;
w[141]= 0.0146624;
w[142]= 0.0155156;
w[143]= 0.00761674;
w[144]= 0.0187999;
w[145]= 0.0135013;
w[146]= 0.0160794;
w[147]= 0.0180586;
w[148]= 0.00905508;
w[149]= 0.00869858;
w[150]= 0.0193968;
w[151]= 0.0209201;
w[152]= 0.0084405;
w[153]= 0.0407657;
w[154]= 0.0109116;
w[155]= 0.0262218;
w[156]= 0.0104767;
w[157]= 1;
w[158]= 1;
w[159]= 1;
w[160]= 1;
w[161]= 0.00658031;
w[162]= 0.0051814;
w[163]= 1;
w[164]= 1;
w[165]= 1;
w[166]= 1;
w[167]= 1;
w[168]= 1;
w[169]= 1;
w[170]= 1;
w[171]= 1;
w[172]= 1;
w[173]= 1;
w[174]= 1;
w[175]= 1;
w[176]= 1;
w[177]= 1;
w[178]= 1;
w[179]= 1;
w[180]= 1;
w[181]= 1;
w[182]= 1;
w[183]= 1;
w[184]= 1;
w[185]= 1;
w[186]= 1;
w[187]= 1;
w[188]= 1;
w[189]= 1;
w[190]= 1;
w[191]= 1;
w[192]= 1;
w[193]= 1;
w[194]= 1;
w[195]= 1;
w[196]= 1;
w[197]= 1;
w[198]= 1;
w[199]= 1;
w[200]= 1;
w[201]= 1;
w[202]= 1;
w[203]= 1;
w[204]= 1;
w[205]= 1;
w[206]= 1;
w[207]= 1;
w[208]= 1;
w[209]= 1;
w[210]= 1;
w[211]= 1;
w[212]= 1;
w[213]= 1;
w[214]= 1;
w[215]= 1;
w[216]= 1;
w[217]= 1;
w[218]= 1;
w[219]= 1;
w[220]= 1;
w[221]= 1;
w[222]= 1;
w[223]= 1;
w[224]= 1;
w[225]= 1;
w[226]= 1;
w[227]= 1;
w[228]= 1;
w[229]= 1;
w[230]= 1;
w[231]= 1;
w[232]= 1;
w[233]= 1;
w[234]= 1;
w[235]= 1;
w[236]= 1;
w[237]= 1;
w[238]= 1;
 w[239]= 1;


 histoWeights_ = new TH1F("h2012","h2012",240,0.,80.);
 
 for(int k=0;k<240;k++){
   histoWeights_->SetBinContent(k+1,w[k]);
 }


}



void PileupBranchAdder::setWeights2011(){
  float w[50];


w[0]= 0.212929;
w[1]= 0.0208114;
w[2]= 0.0584048;
w[3]= 0.538898;
w[4]= 1.357;
w[5]= 1.49913;
w[6]= 1.42247;
w[7]= 1.35904;
w[8]= 1.29946;
w[9]= 1.27925;
w[10]= 1.37845;
w[11]= 1.71246;
w[12]= 1.5291;
w[13]= 1.35234;
w[14]= 1.22215;
w[15]= 1.0155;
w[16]= 1.01137;
w[17]= 0.395465;
w[18]= 0.230984;
w[19]= 0.109883;
w[20]= 0.0433739;
w[21]= 0.0111497;
w[22]= 0.00408801;
w[23]= 0.00115678;
w[24]= 0.000365505;
w[25]= 0.000112391;
w[26]= 3.83894e-05;
w[27]= 1.60651e-05;
w[28]= 4.81412e-06;
w[29]= 1.39717e-06;
w[30]= 1.92368e-06;
w[31]= 4.10748e-06;
w[32]= 2.33157e-05;
w[33]= 4.0181e-05;
w[34]= 4.87786e-05;
w[35]= 0.00194128;
w[36]= 8.97414e-05;
w[37]= 1;
w[38]= 1;
w[39]= 0.000162709;
w[40]= 1;
w[41]= 1;
w[42]= 1;
w[43]= 1;
w[44]= 1;
w[45]= 1;
w[46]= 1;
w[47]= 1;
w[48]= 1;
w[49]= 1;


 histoWeights_ = new TH1F("h2011","h2011",50,0.,50.);
 
 for(int k=0;k<50;k++){
   histoWeights_->SetBinContent(k+1,w[k]);
 }

}
